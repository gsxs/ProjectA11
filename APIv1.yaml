swagger: '2.0'
info:
  version: '1.0'
  title: Project A11 RESTful API
host: localhost:8888
basePath: /api/v1
tags:
  - name: credential
  - name: user
  - name: check-in
  - name: score
  - name: class
  - name: course
  - name: forum
  - name: misc
schemes:
  - http

paths:
  /credential/account:
    put:
      tags:
        - credential
      summary: to register
      description: app_id='0cc175b9c0f1b6a8'
      operationId: account_register
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user-register'
      responses:
        '200':
          description: OK
    post:
      tags:
        - credential
      summary: to login
      operationId: account_login
      description: app_id='9c15af0d3e0ea84d'
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user-login'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              session_id:
                type: string
                example: 21cfcfdb1ca625bdb1341cbfb65d50272b997b02f22396d54a0058c678e91ffe4b3e1bf773a9e386fd042e0069602449
    delete:
      tags:
        - credential
      summary: to logout
      description: clear the session of the logged user, remember to clear the local `session_id`
      operationId: account_logout
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK

  /credential/session_id:
    post:
      tags:
        - credential
      summary: to renew a session_id
      operationId: session_renew
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK

  /user:
    get:
      tags:
        - user
      summary: to fetch the basic info of current logged user
      operationId: user_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user-show'

  /user/{user_id}:
    get:
      tags:
        - user
      summary: to fetch the basic info of the specific user
      operationId: user_fetch_specific
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user-show'

    delete:
      tags:
        - user
      summary: to delete a user
      operationId: delete_users
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  '/class/{class_id}':
    get:
      tags:
        - class
      summary: to fetch the info of the specific class
      operationId: class_fetch_specific
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/class-show'

  '/course/{course_id}':
    get:
      tags:
        - course
      summary: to fetch the info of the specific course
      operationId: course_fetch_specific
      parameters:
        - in: path
          name: course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/course-show'

  '/user/{user_id}/scores':
    get:
      tags:
        - user
        - score
      summary: to fetch the scores of the specific user
      operationId: user_scores_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/score-show'

  /score/{score_id}:
    post:
      tags:
        - score
      summary: to update the specific score item
      operationId: update_specific_score
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: score_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/score-register'
      responses:
        '200':
          description: OK

  /scores:
    put:
      tags:
        - score
      summary: to add some new scores
      operationId: add_new_score
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/score-register'
      responses:
        '200':
          description: OK

  /class/{class_id}/scores:
    put:
      tags:
        - score
        - class
      summary: to add some new scores of a specific class
      operationId: add_new_score_specific_class
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/score-register-specific-class'
      responses:
        '200':
          description: OK

  /user/{user_id}/classes:
    get:
      tags:
        - user
        - class
      summary: to fetch the classes which the current user belongs to
      operationId: user_classes_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/class-show'

  /misc/captcha:
    get:
      tags:
        - misc
      summary: to fetch a captcha image
      operationId: captcha_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: "`app_id` can specify the situation where this captcha will use (such as when login, register, post new topics...)

            the backend would store a dict which may contains something like `{'0cc175b9c0f1b6a8': 'login'}`"
          schema:
            type: object
            properties:
              app_id:
                type: string
                example: "0cc175b9c0f1b6a8"
      responses:
        '200':
          description: OK
          schema:
            type: file
            example: (the binary data of the captcha image)

  /check-in/class/{class_id}/code:
    get:
      tags:
        - check-in
        - class
      summary: to fetch a check-in code
      operationId: check-in-fetch
      description: the code won't be available until "xxx/start" is called
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/check-in-code-show'

  /check-in/code/{code_id}/start:
    post:
      tags:
        - check-in
        - class
      summary: to start a check-in code immediately
      operationId: check-in-start
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  /check-in/verify/{code}:
    put:
      tags:
        - check-in
        - user
      summary: to do a check-in
      operationId: do-check-in
      description: app_id='a97754bc483c6de5'
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code
          required: true
          type: string
          description: 'an ***encrypted*** version of the real `code` (uses [TEA](https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%9E%8B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95) to encrypt)'
      responses:
        '200':
          description: OK

  /class/{class_id}/code/{code_id}/list:
    get:
      tags:
        - check-in
        - class
      summary: to fetch the list of checked-in users
      operationId: check-in-list
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
        - in: path
          name: code_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/user-show'

  /{class|course}/{id}/forum/topics:
    get:
      tags:
        - forum
        - class
      summary: to fetch the list of topics
      operationId: class-forum-topics
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK




definitions:

  user-backend:
    type: object
    properties:
      user_id:
        type: integer
        example: 12345678
      password:
        type: string
        example: p@ssword

  user-register:
    type: object
    properties:
      user_id:
        type: integer
        example: 12345678
      password:
        type: string
        example: p@ssword

  user-login:
    type: object
    properties:
      user_id:
        type: integer
        example: 12345678
      password:
        type: string
        example: p@ssword

  user-show:
    type: object
    properties:
      user_id:
        type: integer
        example: 12345678

  ################################################################
  ################################################################

  class-backend:
    type: object
    properties:
      class_id:
        type: integer
        example: 12345
      class_name:
        type: string
        example: Example-Class
      weekday:
        type: integer
        example: 1
      start:
        type: integer
        example: 3
      end:
        type: integer
        format: int16
        example: 5
      teacher_id:
        type: integer
        example: 12345678
      course_id:
        type: integer
        example: 12345

  class-register:
    $ref: '#/definitions/class-backend'

  class-show:
    $ref: '#/definitions/class-backend'

  ################################################################
  ################################################################

  course-backend:
    type: object
    properties:
      course_id:
        type: integer
        example: 12345
      course_name:
        type: string
        example: Example-Course
      start:
        type: string
        format: date
        example: "2019-01-02"
      end:
        type: string
        format: date
        example: "2019-03-04"

  course-register:
    $ref: '#/definitions/course-backend'

  course-show:
    $ref: '#/definitions/course-backend'

  ################################################################
  ################################################################

  score-backend:
    type: object
    properties:
      score_id:
        type: integer
        example: 42
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 12345678
      class_id:
        type: integer
        example: 12345

  score-register:
    type: object
    properties:
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 12345678
      class_id:
        type: integer
        example: 12345

  score-register-specific-class:
    type: object
    properties:
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 12345678

  score-show:
    $ref: '#/definitions/score-backend'

  ################################################################
  ################################################################

  check-in-code-backend:
    type: object
    properties:
      code_id:
        type: integer
        example: 42
      code:
        type: string
        example: 6789
      class_id:
        type: integer
        example: 12345
      started:
        type: boolean
        example: false
      expire_at:
        type: string
        format: time
        example: "1551682932"

  check-in-code-show:
    type: object
    properties:
      code_id:
        type: integer
        example: 42
      code:
        type: string
        example: 6789

