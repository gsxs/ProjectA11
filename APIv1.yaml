swagger: '2.0'
info:
  version: '1.0'
  title: Project A11 RESTful API
  description: "
    Some common status_code of the responses:\n
    - 400: something went wrong when parsing json\n
    - 401: session_id is required\n
    - 402: invalid session_id\n
    - 403: missing arguments\n
    - 404: no matched data\n
    - 410: no enough permission\n\n
    _**They won't appear in the APIs listed above**_"
host: localhost:8888
basePath: /api/v1
tags:
  - name: credential
  - name: user
  - name: course
  - name: class
  - name: check-in
  - name: score
  - name: material
  - name: forum
  - name: misc
schemes:
  - http

paths:
  /credential/session_id:
    get:
      tags:
        - credential
      summary: to get a new session_id
      operationId: session_new
      responses:
        '200':
          description: OK
    options:
      tags:
        - credential
      summary: to check if a session_id is still valid
      operationId: session_check
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              is_valid:
                type: boolean
        '403':
          description: missing arguments
    post:
      tags:
        - credential
      summary: to renew a session_id
      operationId: session_renew
      description: "**This API is only available when --debug is on**"
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK
        '405':
          description: not currently in debug mode

  /credential/account:
    put:
      tags:
        - credential
      summary: to register
      description: "
        app_id='0cc175b9c0f1b6a8'\n
        CAPTCHA is always required for registering"
      operationId: account_register
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user-register'
      responses:
        '200':
          description: OK
        '405':
          description: incorrect captcha
        '409':
          description:
            conflict user information

    post:
      tags:
        - credential
      summary: to login
      operationId: account_login
      description: "
        app_id='9c15af0d3e0ea84d'\n
        CAPTCHA is needed after two failed login attempts\n
        Whether the next time of login needs CAPTCHA or not is indicated by `need_captcha`\n
        `need_captcha` won't always be returned, but you can assure that,
        if the next time needs CAPTCHA, it will always be there"
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user-login'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
        '405':
          description:
            incorrect captcha
        '406':
          description:
            need capctha
    delete:
      tags:
        - credential
      summary: to logout
      description: clear the session of the logged user, remember to clear the local `session_id`
      operationId: account_logout
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK

  /user:
    get:
      tags:
        - user
      summary: to fetch the basic info of current logged user
      operationId: user_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user-show'

  /user/{user_id}:
    get:
      tags:
        - user
      summary: to fetch the basic info of the specific user
      operationId: user_fetch_specific
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user-show'

    delete:
      tags:
        - user
      summary: to delete a user
      operationId: delete_users
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
        '410':
          description: no enough permission

  /class:
    put:
      tags:
        - class
      summary: to register a new class
      operationId: class_register
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/class-register'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              course_id:
                type: integer
                example: 1

  '/class/{class_id}':
    get:
      tags:
        - class
      summary: to fetch the info of the specific class
      operationId: class_fetch_specific
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/class-show'
    delete:
      tags:
        - class
      summary: to delete the specific class
      operationId: class_delete_specific
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  '/class/{class_id}/enroll_in':
    post:
      tags:
        - class
      summary: to enroll in a specific class
      operationId: class_enroll
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
        '405':
          description: you've already enrolled in before

  '/course':
    put:
      tags:
        - course
      summary: to register a new course
      operationId: course_register
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/course-register'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              course_id:
                type: integer
                example: 1

  '/course/{course_id}':
    get:
      tags:
        - course
      summary: to fetch the info of the specific course
      operationId: course_fetch_specific
      parameters:
        - in: path
          name: course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/course-show'
    delete:
      tags:
        - course
      summary: to delete the specific course
      operationId: course_delete_specific
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  /user/{user_id}/courses:
    get:
      tags:
        - course
      summary: to fetch the courses which the current user belongs to
      operationId: user_courses_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/course-show'

  '/user/{user_id}/scores':
    get:
      tags:
        - score
      summary: to fetch the scores of the specific user
      operationId: user_scores_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/score-show'

  /score/{score_id}:
    post:
      tags:
        - score
      summary: to update the specific score item
      operationId: update_specific_score
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: score_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/score-register'
      responses:
        '200':
          description: OK

  /scores:
    put:
      tags:
        - score
      summary: to add some new scores
      operationId: add_new_score
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/score-register'
      responses:
        '200':
          description: OK

  /class/{class_id}/scores:
    put:
      tags:
        - score
      summary: to add some new scores of a specific class
      operationId: add_new_score_specific_class
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/score-register-specific-class'
      responses:
        '200':
          description: OK

  /user/{user_id}/classes:
    get:
      tags:
        - class
      summary: to fetch the classes which the current user belongs to
      operationId: user_classes_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/class-show'

  /misc/captcha:
    get:
      tags:
        - misc
      summary: to fetch a captcha image
      operationId: captcha_fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: query
          name: app_id
          required: true
          type: string
          description: "
          `app_id` can specify the situation where this captcha will use
          (such as when login, register, post new topics...)\n
          the backend would store a dict which may contains something like
          `{'0cc175b9c0f1b6a8': 'register'}`"
      responses:
        '200':
          description: OK
          schema:
            type: file
            example: (the binary data of the captcha image)
        '410':
          description: app_id is required
        '411':
          description: illegal app_id

  /check-in/class/{class_id}/code:
    get:
      tags:
        - check-in
      summary: to fetch a check-in code
      operationId: check-in-fetch
      description: the code won't be available until "xxx/start" is called
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/check-in-code-show'

  /check-in/code/{code_id}/start:
    post:
      tags:
        - check-in
      summary: to start a check-in code immediately
      operationId: check-in-start
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  /check-in/verify/{code}:
    put:
      tags:
        - check-in
      summary: to do a check-in
      operationId: do-check-in
      description: app_id='a97754bc483c6de5'
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code
          required: true
          type: integer
          # description: 'an ***encrypted*** version of the real `code` (uses [TEA](https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%9E%8B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95) to encrypt)'
      responses:
        '200':
          description: OK
        '404':
          description: invalid check-in code

  /check-in/verify/code/{code_id}/user/{user_id}:
    post:
      tags:
        - check-in
      summary: to check-in manually by a teacher
      operationId: check-in-manual
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code_id
          required: true
          type: integer
        - in: path
          name: user_id
          required: true
          type: integer
      responses:
        '200':
          description: OK

  /check-in/code/{code_id}/list:
    get:
      tags:
        - check-in
      summary: to fetch the list of checked-in users
      operationId: check-in-list
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: code_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/user-show'

  /{class|course}/{id}/forum/topics/list:
    get:
      tags:
        - forum
      summary: to fetch the list of topics
      operationId: class-forum-topics
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                $ref: '#/definitions/topic-show'

  /{class|course}/{id}/forum/topic:
    put:
      tags:
        - forum
      summary: to create a new topic
      operationId: create-topic
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/topic-register'
      responses:
        '200':
          description: OK

  /{class|course}/{id}/forum/topic/{topic_id}:
    get:
      tags:
        - forum
      summary: to fetch the info of a specific topic
      operationId: fetch-topic-info
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
        - in: path
          name: topic_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/topic-show'

  /{class|course}/{id}/forum/topic/{topic_id}/reply:
    put:
      tags:
        - forum
      summary: to create a new reply
      operationId: create-reply
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
        - in: path
          name: topic_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/reply-register'
      responses:
        '200':
          description: OK

  /{class|course}/{id}/forum/topic/{topic_id}/replies:
    get:
      tags:
        - forum
      summary: to fetch the replies
      operationId: replies-fetch
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
        - in: path
          name: topic_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/reply-show'

  /{class|course}/{id}/material:
    post:
      tags:
        - material
      summary: to upload a new teaching material file
      operationId: materials-upload
      consumes:
        - multipart/form-data
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
        - in: formData
          name: file
          description: the binary data of the file
          required: true
          type: file
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/material-show'

  /{class|course}/{id}/materials/list:
    get:
      tags:
        - material
      summary: to fetch the list of current materials
      operationId: materials-list
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: class|course
          required: true
          type: string
          enum: [class, course]
        - in: path
          name: id
          description: a specific class_id or course_id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              list:
                type: array
                items:
                  $ref: '#/definitions/material-show'

  /material/{file_id}:
    get:
      tags:
        - material
      summary: to download a new teaching material file
      operationId: materials-download
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: file_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
            example: (the binary data of the file)
    delete:
      tags:
        - material
      summary: to delete a teaching material file
      operationId: materials-delete
      parameters:
        - in: query
          name: session_id
          required: true
          type: string
        - in: path
          name: file_id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string


definitions:

  user-backend:
    type: object
    properties:
      user_id:
        type: integer
        example: 1
      staff_id:
        type: string
        example: 17052100
      password:
        type: string
        example: p@ssword

  user-register:
    type: object
    properties:
      staff_id:
        type: string
        example: 17052100
      password:
        type: string
        example: p@ssword
      captcha:
        type: string
        example: "xxxx"

  user-login:
    type: object
    properties:
      staff_id:
        type: string
        example: 17052100
      password:
        type: string
        example: p@ssword
      captcha:
        type: string
        example: "xxxx"

  user-show:
    type: object
    properties:
      user_id:
        type: integer
        example: 1
      staff_id:
        type: string
        example: 17052100

  ################################################################
  ################################################################

  class-backend:
    type: object
    properties:
      class_id:
        type: integer
        example: 1
      class_name:
        type: string
        example: Example-Class
      weekday:
        type: integer
        example: 1
      start:
        type: integer
        example: 3
      end:
        type: integer
        example: 5
      teacher_id:
        type: integer
        example: 1
      course_id:
        type: integer
        example: 1

  class-register:
    type: object
    properties:
      class_name:
        type: string
        example: Example-Class
      weekday:
        type: integer
        example: 1
      start:
        type: integer
        example: 3
      end:
        type: integer
        example: 5
      teacher_id:
        type: integer
        example: 1
      course_id:
        type: integer
        example: 1

  class-show:
    $ref: '#/definitions/class-backend'

  ################################################################
  ################################################################

  course-backend:
    type: object
    properties:
      course_id:
        type: integer
        example: 1
      course_name:
        type: string
        example: Example-Course
      start:
        type: string
        format: date
        example: "2019-01-02"
      end:
        type: string
        format: date
        example: "2019-03-04"

  course-register:
    type: object
    properties:
      course_name:
        type: string
        example: Example-Course
      start:
        type: string
        format: date
        example: "2019-01-02"
      end:
        type: string
        format: date
        example: "2019-03-04"

  course-show:
    $ref: '#/definitions/course-backend'

  ################################################################
  ################################################################

  score-backend:
    type: object
    properties:
      score_id:
        type: integer
        example: 1
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 1
      class_id:
        type: integer
        example: 1

  score-register:
    type: object
    properties:
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 1
      class_id:
        type: integer
        example: 1

  score-register-specific-class:
    type: object
    properties:
      score:
        type: integer
        example: 95
      user_id:
        type: integer
        example: 1

  score-show:
    $ref: '#/definitions/score-backend'

  ################################################################
  ################################################################

  check-in-code-backend:
    type: object
    properties:
      code_id:
        type: integer
        example: 1
      code:
        type: string
        example: 6789
      class_id:
        type: integer
        example: 1
      started:
        type: boolean
        example: false
      expire_at:
        type: string
        format: time
        example: "1551682932"

  check-in-code-show:
    type: object
    properties:
      code_id:
        type: integer
        example: 1
      code:
        type: string
        example: 6789

  ################################################################
  ################################################################

  material-backend:
    type: object
    properties:
      file_id:
        type: integer
        example: 1
      filename:
        type: string
        example: "unit-1-slides.ppt"
      internal_filename:
        type: string
        example: 'e4032bac-354b-4473-93c1-70c632d90bec'
      size:
        type: integer
        example: 1024
        description: (in bytes)
      uploaded_at:
        type: string
        format: date
        example: "2019-12-12"
      uploader_id:
        type: integer
        example: 1
      belong_type:
        type: string
        enum: [course, class]
      belong_id:
        type: integer
        example: 1

  material-show:
    type: object
    properties:
      file_id:
        type: integer
        example: 1
      filename:
        type: string
        example: "unit-1-slides.ppt"
      size:
        type: integer
        example: 1024
        description: (in bytes)
      uploaded_at:
        type: string
        format: date
        example: "2019-12-12"
      uploader_id:
        type: integer
        example: 1

  topic-backend:
    type: object
    properties:
      topic_id:
        type: integer
        example: 1
      title:
        type: string
        example: "Example-Topic"
      content:
        type: string
        example: "This is the content of the topic!"
      user_id:
        type: integer
        example: 1
      created_at:
        type: integer
        example: "1552282678"
      updated_at:
        type: integer
        example: "1552282678"
      replies:
        type: integer
        example: 1

  topic-register:
    type: object
    properties:
      title:
        type: string
        example: "Example-Topic"
      content:
        type: string
        example: "This is the content of the topic!"

  topic-show:
    type: object
    properties:
      topic_id:
        type: integer
        example: 1
      title:
        type: string
        example: "Example-Topic"
      content:
        type: string
        example: "This is the content of the topic!"
      user_id:
        type: integer
        example: 1
      created_at:
        type: integer
        example: "1552282678"
      updated_at:
        type: integer
        example: "1552282678"
      replies:
        type: integer
        example: 1

  reply-backend:
    type: object
    properties:
      reply_id:
        type: integer
        example: 1
      topic_id:
        type: integer
        example: 1
      content:
        type: string
        example: "This is a reply!"
      user_id:
        type: integer
        example: 1
      created_at:
        type: integer
        example: "1552282678"

  reply-register:
    type: object
    properties:
      content:
        type: string
        example: "This is a reply!"

  reply-show:
    type: object
    properties:
      reply_id:
        type: integer
        example: 1
      content:
        type: string
        example: "This is a reply!"
      user_id:
        type: integer
        example: 1
      created_at:
        type: integer
        example: "1552282678"


